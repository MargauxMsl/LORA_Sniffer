import time
from sx127x.LoRa import *
from sx127x import *

class LoRaSniffer(LoRa):
    def __init__(self, verbose=False):
        super(LoRaSniffer, self).__init__(verbose)
        self.set_mode(MODE.SLEEP)

    def start_sniffing(self):
        self.set_dio_mapping([0] * 6) #dio mapping permet de savoir comment le module doit réagir à certaines conditions, telles que la réception d'un paquet,la fin de la transmission etc; configure le mapping DIO pour ignorer tous les signaux. En attribuant une liste de six zéros, cela signifie que chaque broche DIO est configurée pour ignorer tout événement, car une valeur de zéro indique généralement l'absence de changement d'état ou d'impulsion.
        self.set_mode(MODE.STDBY)
        self.set_payload_length(255) #les données réelles qu'on veut transmettre d'un appareil à un autre
        self.set_mode(MODE.RXSINGLE) #configuration en mode réception (RX) pour écouter un seul paquet (single packet

def print_payload(payload):
    print("Received:", " ".join(format(x, "02x") for x in payload))

def main():
    lora = LoRaSniffer()
    lora.set_mode(MODE.SLEEP)
    lora.set_dio_mapping([1, 0, 0, 0, 0, 0])
    lora.set_pa_config(pa_select=1)
    lora.set_mode(MODE.RXCONT)

    try:
        print("LoRa Sniffer is running...")
        while True:
            if lora.received():
                payload = lora.read_payload()
                print_payload(payload)
            time.sleep(0.1)
    except KeyboardInterrupt: #interruption du code par ctrl+c
        pass
    finally:
        lora.set_mode(MODE.SLEEP)

if __name__ == "__main__":
    main()

#ce code permet de capturer les paquets LoRa dans l'environnement. Les informations de paquet, telles que le payload (charge utile) hexadécimal..
